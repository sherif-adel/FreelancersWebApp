<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ include file="EF.Utility.CS.ttinclude"#>
<#@ output extension=".cs" #>

<#
CodeGenerationTools code = new CodeGenerationTools(this);
MetadataLoader loader = new MetadataLoader(this);
CodeRegion region = new CodeRegion(this, 1);
MetadataTools ef = new MetadataTools(this);

string inputFile = @"..\FreeLancers.Models\FreeLancerEntities.edmx";
EdmItemCollection ItemCollection = loader.CreateEdmItemCollection(inputFile);
EntityContainer container = ItemCollection.GetItems<EntityContainer>().FirstOrDefault();
string namespaceName = code.VsNamespaceSuggestion();
EntityFrameworkTemplateFileManager fileManager = EntityFrameworkTemplateFileManager.Create(this);

foreach (EntitySet entity in container.BaseEntitySets.OfType<EntitySet>())
{
	string entitySetName = code.Escape(entity);
	string entityType = code.Escape(entity.ElementType);
	string dataServiceName = String.Format("{0}DataService",entityType);
	string entityNameLower = code.Escape(entity.ElementType).ToLower();
	fileManager.StartNewFile(String.Format("{0}.cs",dataServiceName));
	BeginNamespace(namespaceName, code); 
#>
	using System;
	using System.Data.Entity;
	using System.Collections.Generic;
	using System.Linq;
	using FreeLancers.Models;
	using FreeLancers.Log;

<#=Accessibility.ForType(entity.ElementType)#> <#=code.SpaceAfter(code.AbstractOption(entity.ElementType))#>partial class <#=dataServiceName#> : DataServiceBase<<#=entityType#>>
{
<#	region.Begin("Constructor"); #>
	/// <summary>
	/// Gets the specified entity by Id.
	/// </summary>
	/// <param name="id">The <#= entityNameLower #> Id.</param>
	public <#=dataServiceName#>(FreeLancersEntities dataContext):base(dataContext)
	{
		this.DataContext = dataContext;
	}
<#  region.End();#>

<#	region.Begin("Methods"); #>

	/// <summary>
	/// Gets the specified entity by Id.
	/// </summary>
	/// <param name="id">The <#= entityNameLower #> Id.</param>
	public override <#=entityType#> GetById(int id)
	{
		try
		{
			return DataContext.<#=entitySetName#>.FirstOrDefault(entity => entity.<#=entityType#>ID == id);
		}
        catch (Exception ex)
        {
            ExceptionHandler.LogException(ex, System.Reflection.MethodInfo.GetCurrentMethod().Name, FreeLancers.Log.ExceptionHandler.LogThreshold.ERROR);
            throw ex;
        }
	}

	/// <summary>
	/// Gets All.
	/// </summary>
	public override List<<#=entityType#>> GetAll()
	{
		try
		{
			return DataContext.<#=entitySetName#>.ToList();
		}
		catch (Exception ex)
        {
            ExceptionHandler.LogException(ex, System.Reflection.MethodInfo.GetCurrentMethod().Name, FreeLancers.Log.ExceptionHandler.LogThreshold.ERROR);
            throw ex;
        }
	}

	/// <summary>
	/// Adds the specified entity.
	/// </summary>
	/// <param name="<#= entityNameLower #>">The <#= entityNameLower #> entity.</param>
	public override void Add(<#=entityType#> <#= entityNameLower #>)
	{
		try
		{
			DataContext.<#=entitySetName#>.Add(<#= entityNameLower #>);
			DataContext.SaveChanges();
		}
		catch (Exception ex)
        {
            ExceptionHandler.LogException(ex, System.Reflection.MethodInfo.GetCurrentMethod().Name, FreeLancers.Log.ExceptionHandler.LogThreshold.ERROR);
            throw ex;
        }
	}

	/// <summary>
	/// Deletes the specified entity.
	/// </summary>
	/// <param name="<#= entityNameLower #>">The <#= entityNameLower #> entity.</param>
	public override void Delete(<#=entityType#> <#= entityNameLower #>)
	{
		try
		{
			DataContext.<#=entitySetName#>.Remove(<#= entityNameLower #>);
			DataContext.SaveChanges();
		}
		catch (Exception ex)
        {
            ExceptionHandler.LogException(ex, System.Reflection.MethodInfo.GetCurrentMethod().Name, FreeLancers.Log.ExceptionHandler.LogThreshold.ERROR);
            throw ex;
        }
	}

	/// <summary>
	/// Deletes the entity by Id.
	/// </summary>
	/// <param name="id">The <#= entityNameLower #> Id.</param>
	public override void Delete(int id)
	{
		try
		{
			var <#= entityNameLower #> = GetById(id);
			DataContext.<#=entitySetName#>.Remove(<#= entityNameLower #>);
			DataContext.SaveChanges();
		}
		catch (Exception ex)
        {
            ExceptionHandler.LogException(ex, System.Reflection.MethodInfo.GetCurrentMethod().Name, FreeLancers.Log.ExceptionHandler.LogThreshold.ERROR);
            throw ex;
        }
	}

	/// <summary>
	/// Updates the specified entity.
	/// </summary>
	/// <param name="<#= entityNameLower #>">The <#= entityNameLower #> entity.</param>
	public override void Update(<#=entityType#> <#= entityNameLower #>)
	{
		try
		{
			DataContext.Entry(<#= entityNameLower #>).State = EntityState.Modified;
			DataContext.SaveChanges();
		}
		catch (Exception ex)
        {
            ExceptionHandler.LogException(ex, System.Reflection.MethodInfo.GetCurrentMethod().Name, FreeLancers.Log.ExceptionHandler.LogThreshold.ERROR);
            throw ex;
        }
	}
<# region.End();#>
}
<#
	EndNamespace(namespaceName);
}

fileManager.Process();

#>

<#+	
void BeginNamespace(string namespaceName, CodeGenerationTools code)
{
	CodeRegion region = new CodeRegion(this);
	if (!String.IsNullOrEmpty(namespaceName))
	{
#>
namespace <#=code.EscapeNamespace(namespaceName)#>
{
<#+
		PushIndent(CodeRegion.GetIndent(1));
	}
}


void EndNamespace(string namespaceName)
{
	if (!String.IsNullOrEmpty(namespaceName))
	{
		PopIndent();
#>
}
<#+
	}
}

#>